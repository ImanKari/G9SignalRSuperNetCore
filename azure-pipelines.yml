trigger:
- master

pool:
  vmImage: 'windows-latest'

parameters:
  - name: solutionPath
    type: string
    default: 'G9SignalRSuperNetCore/G9SignalRSuperNetCore.sln'
  - name: testProjects
    type: string
    default: 'null' # Leave empty if no test projects are defined
  - name: nugetPackages
    type: object
    default:
      - 'G9SignalRSuperNetCore/G9SignalRSuperNetCore.Client/bin/Release/*.nupkg'
      - 'G9SignalRSuperNetCore/G9SignalRSuperNetCore.Server/bin/Release/*.nupkg'
      - 'G9SignalRSuperNetCore/G9SignalRSuperNetCore.Server.ClientInterfaceGenerator/bin/Release/*.nupkg'
  - name: repositoryName
    type: string
    default: 'G9SignalRSuperNetCore' # Default to the same as the project name

variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
# Test API keys validation
- task: PowerShell@2
  displayName: "Validate Required API Keys"
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Starting API Keys validation..."
      $hasError = $false
      
      # Function to validate GitHub PAT
      function Test-GitHubPAT {
          param($token)
          try {
              $headers = @{
                  'Authorization' = "token $token"
                  'Accept' = 'application/vnd.github.v3+json'
              }
              $response = Invoke-RestMethod -Uri 'https://api.github.com/user' -Headers $headers -Method Get
              Write-Host "✓ GitHub PAT is valid and active"
              return $true
          }
          catch {
              $statusCode = $_.Exception.Response.StatusCode.value__
              switch ($statusCode) {
                  401 { Write-Host "##vso[task.logissue type=error]GitHub PAT is invalid or expired" }
                  403 { Write-Host "##vso[task.logissue type=error]GitHub PAT lacks required permissions" }
                  default { Write-Host "##vso[task.logissue type=error]GitHub PAT validation failed: $_" }
              }
              return $false
          }
      }
      
      # Function to validate Azure DevOps PAT
      function Test-AzureDevOpsPAT {
          param($token)
          try {
              $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$token"))
              $headers = @{
                  'Authorization' = "Basic $base64AuthInfo"
                  'Accept' = 'application/json'
              }
              # Using Azure DevOps REST API to validate token
              $org = "g9tm" # Your organization name
              $response = Invoke-RestMethod -Uri "https://dev.azure.com/$org/_apis/projects?api-version=6.0" -Headers $headers -Method Get
              Write-Host "✓ Azure DevOps PAT is valid and active"
              return $true
          }
          catch {
              $statusCode = $_.Exception.Response.StatusCode.value__
              switch ($statusCode) {
                  401 { Write-Host "##vso[task.logissue type=error]Azure DevOps PAT is invalid or expired" }
                  403 { Write-Host "##vso[task.logissue type=error]Azure DevOps PAT lacks required permissions" }
                  default { Write-Host "##vso[task.logissue type=error]Azure DevOps PAT validation failed: $_" }
              }
              return $false
          }
      }
      
      # Function to validate NuGet API Key
      function Test-NuGetApiKey {
          param($apiKey)
          try {
              $headers = @{
                  'X-NuGet-ApiKey' = $apiKey
                  'Accept' = 'application/json'
              }
              # Verify API key using NuGet API
              $response = Invoke-RestMethod -Uri 'https://api.nuget.org/v3/index.json' -Headers $headers -Method Get
              
              # Additional validation by attempting to query package metadata
              $verifyUrl = 'https://api.nuget.org/v3-flatcontainer/newtonsoft.json/13.0.1/newtonsoft.json.nuspec'
              $response = Invoke-RestMethod -Uri $verifyUrl -Headers $headers -Method Get
              
              Write-Host "✓ NuGet API Key is valid and active"
              return $true
          }
          catch {
              $statusCode = $_.Exception.Response.StatusCode.value__
              switch ($statusCode) {
                  401 { Write-Host "##vso[task.logissue type=error]NuGet API Key is invalid or expired" }
                  403 { Write-Host "##vso[task.logissue type=error]NuGet API Key lacks required permissions" }
                  default { Write-Host "##vso[task.logissue type=error]NuGet API Key validation failed: $_" }
              }
              return $false
          }
      }
      
      Write-Host "`nValidating GitHub PAT..."
      if (-not (Test-GitHubPAT -token "$(Github.PAT)")) {
          $hasError = $true
      }
      
      Write-Host "`nValidating Azure DevOps PAT..."
      if (-not (Test-AzureDevOpsPAT -token "$(AzureDevOps.PAT)")) {
          $hasError = $true
      }
      
      Write-Host "`nValidating NuGet API Key..."
      if (-not (Test-NuGetApiKey -apiKey "$(NuGetApiKey)")) {
          $hasError = $true
      }
      
      if ($hasError) {
          Write-Host "##vso[task.complete result=Failed;]One or more API keys failed validation"
          throw "API key validation failed. Please check the logs above for specific errors."
      }
      else {
          Write-Host "`n✓ All API keys are valid and active"
      }

# Install NuGet tool
- task: NuGetToolInstaller@1

# Restore NuGet packages
- task: NuGetCommand@2
  inputs:
    restoreSolution: '${{ parameters.solutionPath }}'

# Build the solution
- task: VSBuild@1
  inputs:
    solution: '${{ parameters.solutionPath }}'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:ContinuousIntegrationBuild=true /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Set runtime variable for tests
- task: Bash@3
  displayName: "Evaluate Test Projects"
  inputs:
    targetType: 'inline'
    script: |
      if [ "${{ parameters.testProjects }}" != "null" ]; then
        echo "##vso[task.setvariable variable=runTests]true"
      else
        echo "##vso[task.setvariable variable=runTests]false"
      fi

# Run tests if applicable
- ${{ if eq(variables.runTests, 'true') }}:
  - task: VSTest@2
    displayName: Run Unit Tests
    inputs:
      testSelector: testAssemblies
      testAssemblyVer2: '${{ parameters.testProjects }}'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

# Validate and publish NuGet packages
- ${{ each packagePath in parameters.nugetPackages }}:
  - task: PowerShell@2
    displayName: "Publish NuGet Package - ${{ packagePath }}"
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "==============================================="
        Write-Host "Starting NuGet Package Publishing Process"
        Write-Host "==============================================="
        
        # Display current working directory and package path
        Write-Host "Current Directory: $(Get-Location)"
        $packagePath = "${{ packagePath }}"
        Write-Host "Looking for packages in: $packagePath"
        
        # Verify path exists
        if (-not (Test-Path (Split-Path $packagePath -Parent))) {
            Write-Host "##vso[task.logissue type=warning]Parent directory does not exist: $(Split-Path $packagePath -Parent)"
            Write-Host "Directory Structure:"
            Get-ChildItem -Path "$(Get-Location)" -Recurse -Directory | Select-Object FullName | Format-Table
            throw "Parent directory not found"
        }
        
        # Try to find packages
        try {
            $packages = Get-ChildItem -Path $packagePath -ErrorAction Stop
            Write-Host "Found $($packages.Count) package(s)"
        }
        catch {
            Write-Host "##vso[task.logissue type=error]Error searching for packages: $_"
            Write-Host "Contents of parent directory:"
            Get-ChildItem -Path (Split-Path $packagePath -Parent) -Force | Format-Table Name, LastWriteTime, Length
            throw "Failed to locate packages"
        }
        
        # If no packages found
        if ($packages.Count -eq 0) {
            Write-Host "##vso[task.logissue type=warning]No packages found matching pattern: $packagePath"
            Write-Host "Searching nearby directories for .nupkg files..."
            $nearbyPackages = Get-ChildItem -Path (Split-Path $packagePath -Parent) -Recurse -Filter "*.nupkg"
            if ($nearbyPackages) {
                Write-Host "Found these .nupkg files in nearby directories:"
                $nearbyPackages | ForEach-Object {
                    Write-Host " - $($_.FullName)"
                }
            }
            throw "No packages found to publish"
        }
        
        # Process each package
        foreach ($package in $packages) {
            Write-Host "`n-------------------------------------------"
            Write-Host "Processing package: $($package.Name)"
            Write-Host "Full path: $($package.FullName)"
            Write-Host "Last modified: $($package.LastWriteTime)"
            Write-Host "Size: $([math]::Round($package.Length / 1KB, 2)) KB"
            Write-Host "-------------------------------------------"
            
            # Verify package exists and is readable
            if (-not (Test-Path $package.FullName -PathType Leaf)) {
                Write-Host "##vso[task.logissue type=error]Package file no longer exists or is not accessible: $($package.FullName)"
                continue
            }
            
            # Verify package is a valid .nupkg file
            if (-not $package.Extension -eq ".nupkg") {
                Write-Host "##vso[task.logissue type=warning]File is not a .nupkg file: $($package.FullName)"
                continue
            }
            
            # Attempt to publish
            try {
                Write-Host "Attempting to publish package..."
                $output = & dotnet nuget push $package.FullName --api-key $(NuGetApiKey) --source https://api.nuget.org/v3/index.json --skip-duplicate 2>&1
                Write-Host "Push command output:"
                Write-Host $output
                
                if ($LASTEXITCODE -eq 0) {
                    Write-Host "Successfully published package: $($package.Name)"
                } else {
                    Write-Host "##vso[task.logissue type=error]Failed to publish package. Exit code: $LASTEXITCODE"
                    throw "Package push failed with exit code $LASTEXITCODE"
                }
            }
            catch {
                Write-Host "##vso[task.logissue type=error]Exception while publishing package: $_"
                throw "Failed to publish package: $_"
            }
        }
        
        Write-Host "`n==============================================="
        Write-Host "Package Publishing Process Complete"
        Write-Host "==============================================="

- task: PowerShell@2
  displayName: "Sync Azure Devops repo with GitHub repo"
  inputs:
    targetType: 'inline'
    script: |
      # Write your PowerShell commands here.
      Write-Host ' - - - - - - - - - - - - - - - - - - - - - - - - -'
      Write-Host ' reflect Azure Devops repo changes to GitHub repo'
      Write-Host ' - - - - - - - - - - - - - - - - - - - - - - - - - '
      
      $repoName = "${{ parameters.repositoryName }}"
      $githubToken = "$(Github.PAT)"
      $headers = @{
          Authorization = "token $githubToken"
          Accept = "application/vnd.github.v3+json"
      }

      # Check if repository exists
      try {
          $repoCheckUrl = "https://api.github.com/repos/ImanKari/$repoName"
          $repoExists = Invoke-RestMethod -Uri $repoCheckUrl -Headers $headers -Method Get -ErrorAction SilentlyContinue
          Write-Host "Repository $repoName exists on GitHub"
      } catch {
          if ($_.Exception.Response.StatusCode.value__ -eq 404) {
              Write-Host "Repository $repoName does not exist. Creating it..."
              
              # Create repository
              $createRepoUrl = "https://api.github.com/user/repos"
              $body = @{
                  name = $repoName
                  private = $true  # Set to false if you want public repository
                  auto_init = $false
              } | ConvertTo-Json

              try {
                  $newRepo = Invoke-RestMethod -Uri $createRepoUrl -Headers $headers -Method Post -Body $body -ContentType "application/json"
                  Write-Host "Successfully created repository $repoName"
              } catch {
                  Write-Error "Failed to create repository: $_"
                  throw "Repository creation failed"
              }
          } else {
              Write-Error "Error checking repository: $_"
              throw "Repository check failed"
          }
      }

      # Proceed with sync process
      $stageDir = '$(Build.SourcesDirectory)' | Split-Path
      $githubDir = $stageDir +"\"+"gitHub"
      $destination = $githubDir +"\"+$repoName+".git"
      $alias = 'ImanKari:'+ $githubToken
      $sourceURL = 'https://$(AzureDevOps.PAT)@g9tm.visualstudio.com/'+$repoName+'/_git/'+ $repoName
      $destURL = 'https://' + $alias + '@github.com/ImanKari/'+$repoName+'.git'

      # Check if the parent directory exists and delete
      if((Test-Path -path $githubDir)) {
          Remove-Item -Path $githubDir -Recurse -force
      }
      if(!(Test-Path -path $githubDir)) {
          New-Item -ItemType directory -Path $githubDir
          Set-Location $githubDir
          git clone --mirror $sourceURL
      } else {
          Write-Host "The given folder path $githubDir already exists"
      }

      Set-Location $destination
      Write-Output '*****Ignore giant file****'
      git rm --cached giant_file
      git commit --amend -CHEAD
      Write-Output '*****Git removing remote secondary****'
      git remote rm secondary
      Write-Output '*****Git remote add****'
      git remote add --mirror=fetch secondary $destURL
      Write-Output '*****Git fetch origin****'
      git fetch $sourceURL
      Write-Output '*****Git push secondary****'
      git push secondary --all
      Write-Output '**Azure Devops repo synced with Github repo**'
      
      Set-Location $stageDir
      if((Test-Path -path $githubDir)) {
          Remove-Item -Path $githubDir -Recurse -force
      }