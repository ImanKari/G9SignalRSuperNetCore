trigger:
- master

pool:
  vmImage: 'windows-latest'

parameters:
  - name: solutionPath
    type: string
    default: 'G9SignalRSuperNetCore/G9SignalRSuperNetCore.sln'
  - name: testProjects
    type: string
    default: '' # Leave empty if no test projects are defined
  - name: nugetPackages
    type: object
    default:
      - 'G9SignalRSuperNetCore.Client/bin/Release/*.nupkg'
      - 'G9SignalRSuperNetCore.Server/bin/Release/*.nupkg'

variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
# Install NuGet tool
- task: NuGetToolInstaller@1

# Restore NuGet packages
- task: NuGetCommand@2
  inputs:
    restoreSolution: '${{ parameters.solutionPath }}'

# Build the solution
- task: VSBuild@1
  inputs:
    solution: '${{ parameters.solutionPath }}'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:ContinuousIntegrationBuild=true /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Set runtime variable for tests
- script: |
    if [ "${{ parameters.testProjects }}" != "" ]; then
      echo "##vso[task.setvariable variable=runTests]true"
    else
      echo "##vso[task.setvariable variable=runTests]false"
    fi
  displayName: "Evaluate Test Projects"

# Run tests if applicable
- ${{ if eq(variables.runTests, 'true') }}:
  - task: VSTest@2
    displayName: Run Unit Tests
    inputs:
      testSelector: testAssemblies
      testAssemblyVer2: '${{ parameters.testProjects }}'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

# Publish NuGet packages
- ${{ each packagePath in parameters.nugetPackages }}:
  - task: DotNetCoreCLI@2
    displayName: "Publish NuGet Package - $(packagePath)"
    inputs:
      command: custom
      custom: nuget
      arguments: >
        push $(Pipeline.Workspace)/$(packagePath)
        -s https://api.nuget.org/v3/index.json
        -k $(NuGetApiKey) 
        --skip-duplicate
